"""
Django settings for orbital_backend project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from pathlib import Path
from google.oauth2 import service_account

import os
import dj_database_url
import environ
env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

CLIENT_URL = env('CLIENT_URL')
ALLOWED_HOST = env('ALLOWED_HOST')
DEPLOYED_ALLOWED_HOST = env('DEPLOYED_ALLOWED_HOST')
ML_SERVER_URL = env('ML_SERVER_URL')
ML_SERVER_ALLOWED_HOST = env('ML_SERVER_ALLOWED_HOST')
VERIFY_EMAIL_URL = env('VERIFY_EMAIL_URL')


CORS_ALLOWED_ORIGINS = [
    CLIENT_URL,
    ML_SERVER_URL
]

CSRF_TRUSTED_ORIGINS = [
    CLIENT_URL,
    ML_SERVER_URL
]

ALLOWED_HOSTS = [
    ALLOWED_HOST,
    DEPLOYED_ALLOWED_HOST,
    ML_SERVER_ALLOWED_HOST
]

CORS_ORIGIN_WHITELIST = [
    CLIENT_URL,
    ML_SERVER_URL
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = [
    'Content-Type',
    'X-CSRFToken',
    'Authorization'
]

CSRF_COOKIE_HTTPONLY = False

CORS_ORIGIN_ALLOW_ALL=True

# CORS_TRUSTED_ORIGINS = [
#     "http://localhost:3000",
# ]


SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760

# Google Cloud

GCLOUD_PRIVATE_KEY = env('GCLOUD_PRIVATE_KEY').replace('\\n', '\n')

DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

GS_CREDENTIALS = service_account.Credentials.from_service_account_info({
    "type": "service_account",
    "project_id": env('GCLOUD_PROJECT_ID'),
    "private_key_id": env('GCLOUD_PRIVATE_KEY_ID'),
    "private_key": GCLOUD_PRIVATE_KEY,
    "client_email": env('GCLOUD_CLIENT_EMAIL'),
    "client_id": env('GCLOUD_CLIENT_ID'),
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/orbital-backend-staging%40orbital-2023-389510.iam.gserviceaccount.com",
    "universe_domain": "googleapis.com"
})

# .from_service_account_file(
#     "orbital_backend/service-account.json"
# )

GS_BUCKET_NAME = 'orbital-backend'


# Email Verification Config

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env('EMAIL_ID') 
EMAIL_HOST_PASSWORD = env('EMAIL_PW')

DEFAULT_FROM_EMAIL = env('EMAIL_FROM')

# For user model

AUTH_USER_MODEL = 'users.User'

AUTHENTICATION_BACKENDS = ['users.auth.EmailBackend']

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES':(
        'rest_framework.permissions.IsAuthenticated',
    ),

}

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


# Application definition

INSTALLED_APPS = [
    'songs',
    'users',
    #'transcription',
    #'transcribe_song',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'verify_email.apps.VerifyEmailConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

ROOT_URLCONF = 'orbital_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['users/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'orbital_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

if env('ENVIRONMENT') == 'DEV':
    DATABASES = {

        'default': {

            'ENGINE': 'django.db.backends.postgresql_psycopg2',

            'NAME': env('DATABASE_NAME'),

            'USER': env('DATABASE_USER'),

            'PASSWORD': env('DATABASE_PASSWORD'),

            'HOST': 'localhost',

            'PORT': '5432',

        }

    }
else:
    db_from_env = dj_database_url.config(conn_max_age=500)
    print(db_from_env)
    DATABASES = { 'default': db_from_env }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
